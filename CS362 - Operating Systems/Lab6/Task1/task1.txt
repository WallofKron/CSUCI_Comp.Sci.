~~~SECTION 1~~~

The code looks as if it will execute normally, but it will probably deadlock like the original paradigm states. If a low enough number of philosophers try to execute, will most likely deadlock. If more philosophers are used for the problem, then likely, the code will execute longer, making a deadlock less likely, but probably still inevitable. 


~~~SECTION 2~~~




~~~SECTION 3~~~

As previously stated, the program deadlocks when 1(obviously) or 2 philosophers attempt to eat, it gets deadlocked, and the only way to exit program is ctrl-c. However, when running between 3 and 5 philosophers, the program successfully executes and does not get deadlocked. When a single execution is run multiple times (./philo 4 4) for example, the order of the completion varies (race conditions) and the output is different every time. 



~~~SECTION 4~~~




~~~SECTION 5~~~

Like Section 3, with every single run with larger numbers of philosophers and variable round numbers, none of them deadlocked. It seems, with that the higher number of threads, it has an inversely exponential decrease in likelihood that an algorithm will deadlock. So by around 5 or 6, the likelihood is basically zero. 



~~~SECTION 6~~~






~~~SECTION 7~~~

The code still functions as before whilst deadlocking while threads < 3. But, because each thread is spinlocking while its waiting for the unlock, it seems as if each thread runs separately of each other, especially toward the end of output. Before, the output was relatively jumbled/random, because everything was executing and printing almost constantly. Compared to after the usleep calls were used, where now their are large chunks of space where only 1 thread is executing, ex:
Its almost linear processing. Which makes sense because all the other threads are essentially spinlocking allowing for 1 or 2 threads to execute at a time. 


Philsopher no. 4 eating
Philsopher no. 4 stopped eating
Philsopher no. 4 has returned chopstick 4
Philsopher no. 4 has returned chopstick 5
Philsopher no. 4 finished turn 7
>>>>>> Philsopher no. 4 finished meal. <<<<<<
Philsopher no. 3 grabbed chopstick 4
Philsopher no. 5 has grabbed chopstick 5
Philsopher no. 3 eating
Philsopher no. 5 tries to grab chopstic 0
Philsopher no. 3 stopped eating
Philsopher no. 3 has returned chopstick 3
Philsopher no. 3 has returned chopstick 4
Philsopher no. 3 finished turn 7
>>>>>> Philsopher no. 3 finished meal. <<<<<<
Philsopher no. 2 grabbed chopstick 3
Philsopher no. 2 eating
Philsopher no. 2 stopped eating
Philsopher no. 2 has returned chopstick 2
Philsopher no. 2 has returned chopstick 3
Philsopher no. 2 finished turn 7
>>>>>> Philsopher no. 2 finished meal. <<<<<<
Philsopher no. 1 grabbed chopstick 2
Philsopher no. 1 eating
Philsopher no. 1 stopped eating
Philsopher no. 1 has returned chopstick 1
Philsopher no. 1 has returned chopstick 2
Philsopher no. 1 finished turn 7
>>>>>> Philsopher no. 1 finished meal. <<<<<<